{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\luisa\\\\Downloads\\\\Proyecto-geolocalizacion-main\\\\Proyecto-geolocalizacion-main\\\\frontend\\\\src\\\\pages\\\\AuthPage.js\",\n  _s = $RefreshSig$();\n// frontend/src/pages/AuthPage.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport AuthForm from '../components/AuthForm';\nimport { useNavigate } from 'react-router-dom';\nimport '../styles/AuthPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthPage = ({\n  setAuthToken\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [isRegister, setIsRegister] = useState(false);\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [country, setCountry] = useState('');\n  const [message, setMessage] = useState('');\n  const [error, setError] = useState('');\n  const API_URL = 'http://localhost:5000/api/auth';\n  const handleSubmit = async e => {\n    e.preventDefault();\n    setMessage('');\n    setError('');\n    try {\n      let res;\n      if (isRegister) {\n        res = await axios.post(`${API_URL}/register`, {\n          username,\n          email,\n          password,\n          country\n        });\n        setMessage('Registro exitoso! Ya puedes iniciar sesión.');\n        setIsRegister(false);\n      } else {\n        res = await axios.post(`${API_URL}/login`, {\n          email,\n          password\n        });\n        setMessage('Inicio de sesión exitoso!');\n        localStorage.setItem('token', res.data.token);\n        setAuthToken(res.data.token);\n        navigate('/');\n      }\n    } catch (err) {\n      console.error('Error de autenticación:', err.response ? err.response.data : err.message);\n      setError(err.response && err.response.data.message ? err.response.data.message : 'Error de red o del servidor.');\n    }\n  };\n  const handleToggleAuthMode = () => {\n    setIsRegister(!isRegister);\n    setMessage('');\n    setError('');\n    setUsername('');\n    setEmail('');\n    setPassword('');\n    setCountry('');\n  };\n\n  // 👇 Función para manejar el éxito del login con Google\n  const handleGoogleSuccess = async credentialResponse => {\n    const idToken = credentialResponse.credential;\n    try {\n      // Envía el token de Google a tu backend para verificación y login/registro\n      const res = await axios.post(`${API_URL}/google`, {\n        token: idToken\n      });\n      setMessage('Inicio de sesión con Google exitoso!');\n      localStorage.setItem('token', res.data.token); // Guarda el token de TU backend\n      setAuthToken(res.data.token);\n      navigate('/'); // Redirige a la página de inicio\n    } catch (err) {\n      console.error('Error en el login con Google:', err);\n      setError('No se pudo iniciar sesión con Google. Inténtalo de nuevo.');\n    }\n  };\n\n  // 👇 Función para manejar el error del login con Google\n  const handleGoogleFailure = () => {\n    console.error('El inicio de sesión con Google ha fallado.');\n    setError('El inicio de sesión con Google ha fallado. Por favor, intenta de nuevo.');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-page-container\",\n    children: /*#__PURE__*/_jsxDEV(AuthForm, {\n      isRegister: isRegister,\n      username: username,\n      setUsername: setUsername,\n      email: email,\n      setEmail: setEmail,\n      password: password,\n      setPassword: setPassword,\n      country: country,\n      setCountry: setCountry,\n      onSubmit: handleSubmit,\n      message: message,\n      error: error,\n      onToggleAuthMode: handleToggleAuthMode,\n      onGoogleSuccess: handleGoogleSuccess // 👈 Pasa la función de éxito\n      ,\n      onGoogleFailure: handleGoogleFailure // 👈 Pasa la función de error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthPage, \"nKmdBH/CHTJqGscmxb5ZEHkFCpg=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthPage;\nexport default AuthPage;\nvar _c;\n$RefreshReg$(_c, \"AuthPage\");","map":{"version":3,"names":["React","useState","axios","AuthForm","useNavigate","jsxDEV","_jsxDEV","AuthPage","setAuthToken","_s","navigate","isRegister","setIsRegister","username","setUsername","email","setEmail","password","setPassword","country","setCountry","message","setMessage","error","setError","API_URL","handleSubmit","e","preventDefault","res","post","localStorage","setItem","data","token","err","console","response","handleToggleAuthMode","handleGoogleSuccess","credentialResponse","idToken","credential","handleGoogleFailure","className","children","onSubmit","onToggleAuthMode","onGoogleSuccess","onGoogleFailure","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/luisa/Downloads/Proyecto-geolocalizacion-main/Proyecto-geolocalizacion-main/frontend/src/pages/AuthPage.js"],"sourcesContent":["// frontend/src/pages/AuthPage.js\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport AuthForm from '../components/AuthForm';\nimport { useNavigate } from 'react-router-dom';\nimport '../styles/AuthPage.css';\n\nconst AuthPage = ({ setAuthToken }) => {\n    const navigate = useNavigate();\n    const [isRegister, setIsRegister] = useState(false);\n    const [username, setUsername] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [country, setCountry] = useState('');\n    const [message, setMessage] = useState('');\n    const [error, setError] = useState('');\n\n    const API_URL = 'http://localhost:5000/api/auth';\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setMessage('');\n        setError('');\n\n        try {\n            let res;\n            if (isRegister) {\n                res = await axios.post(`${API_URL}/register`, { username, email, password, country });\n                setMessage('Registro exitoso! Ya puedes iniciar sesión.');\n                setIsRegister(false);\n            } else {\n                res = await axios.post(`${API_URL}/login`, { email, password });\n                setMessage('Inicio de sesión exitoso!');\n                localStorage.setItem('token', res.data.token);\n                setAuthToken(res.data.token);\n                navigate('/');\n            }\n        } catch (err) {\n            console.error('Error de autenticación:', err.response ? err.response.data : err.message);\n            setError(err.response && err.response.data.message ? err.response.data.message : 'Error de red o del servidor.');\n        }\n    };\n\n    const handleToggleAuthMode = () => {\n        setIsRegister(!isRegister);\n        setMessage('');\n        setError('');\n        setUsername('');\n        setEmail('');\n        setPassword('');\n        setCountry('');\n    };\n\n    // 👇 Función para manejar el éxito del login con Google\n    const handleGoogleSuccess = async (credentialResponse) => {\n        const idToken = credentialResponse.credential;\n        try {\n            // Envía el token de Google a tu backend para verificación y login/registro\n            const res = await axios.post(`${API_URL}/google`, {\n                token: idToken,\n            });\n\n            setMessage('Inicio de sesión con Google exitoso!');\n            localStorage.setItem('token', res.data.token); // Guarda el token de TU backend\n            setAuthToken(res.data.token);\n            navigate('/'); // Redirige a la página de inicio\n        } catch (err) {\n            console.error('Error en el login con Google:', err);\n            setError('No se pudo iniciar sesión con Google. Inténtalo de nuevo.');\n        }\n    };\n\n    // 👇 Función para manejar el error del login con Google\n    const handleGoogleFailure = () => {\n        console.error('El inicio de sesión con Google ha fallado.');\n        setError('El inicio de sesión con Google ha fallado. Por favor, intenta de nuevo.');\n    };\n\n    return (\n        <div className=\"auth-page-container\">\n            <AuthForm\n                isRegister={isRegister}\n                username={username} setUsername={setUsername}\n                email={email} setEmail={setEmail}\n                password={password} setPassword={setPassword}\n                country={country} setCountry={setCountry}\n                onSubmit={handleSubmit}\n                message={message} error={error}\n                onToggleAuthMode={handleToggleAuthMode}\n                onGoogleSuccess={handleGoogleSuccess} // 👈 Pasa la función de éxito\n                onGoogleFailure={handleGoogleFailure} // 👈 Pasa la función de error\n            />\n        </div>\n    );\n};\n\nexport default AuthPage;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAO,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACoB,OAAO,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACsB,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMwB,OAAO,GAAG,gCAAgC;EAEhD,MAAMC,YAAY,GAAG,MAAOC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBN,UAAU,CAAC,EAAE,CAAC;IACdE,QAAQ,CAAC,EAAE,CAAC;IAEZ,IAAI;MACA,IAAIK,GAAG;MACP,IAAIlB,UAAU,EAAE;QACZkB,GAAG,GAAG,MAAM3B,KAAK,CAAC4B,IAAI,CAAC,GAAGL,OAAO,WAAW,EAAE;UAAEZ,QAAQ;UAAEE,KAAK;UAAEE,QAAQ;UAAEE;QAAQ,CAAC,CAAC;QACrFG,UAAU,CAAC,6CAA6C,CAAC;QACzDV,aAAa,CAAC,KAAK,CAAC;MACxB,CAAC,MAAM;QACHiB,GAAG,GAAG,MAAM3B,KAAK,CAAC4B,IAAI,CAAC,GAAGL,OAAO,QAAQ,EAAE;UAAEV,KAAK;UAAEE;QAAS,CAAC,CAAC;QAC/DK,UAAU,CAAC,2BAA2B,CAAC;QACvCS,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,GAAG,CAACI,IAAI,CAACC,KAAK,CAAC;QAC7C1B,YAAY,CAACqB,GAAG,CAACI,IAAI,CAACC,KAAK,CAAC;QAC5BxB,QAAQ,CAAC,GAAG,CAAC;MACjB;IACJ,CAAC,CAAC,OAAOyB,GAAG,EAAE;MACVC,OAAO,CAACb,KAAK,CAAC,yBAAyB,EAAEY,GAAG,CAACE,QAAQ,GAAGF,GAAG,CAACE,QAAQ,CAACJ,IAAI,GAAGE,GAAG,CAACd,OAAO,CAAC;MACxFG,QAAQ,CAACW,GAAG,CAACE,QAAQ,IAAIF,GAAG,CAACE,QAAQ,CAACJ,IAAI,CAACZ,OAAO,GAAGc,GAAG,CAACE,QAAQ,CAACJ,IAAI,CAACZ,OAAO,GAAG,8BAA8B,CAAC;IACpH;EACJ,CAAC;EAED,MAAMiB,oBAAoB,GAAGA,CAAA,KAAM;IAC/B1B,aAAa,CAAC,CAACD,UAAU,CAAC;IAC1BW,UAAU,CAAC,EAAE,CAAC;IACdE,QAAQ,CAAC,EAAE,CAAC;IACZV,WAAW,CAAC,EAAE,CAAC;IACfE,QAAQ,CAAC,EAAE,CAAC;IACZE,WAAW,CAAC,EAAE,CAAC;IACfE,UAAU,CAAC,EAAE,CAAC;EAClB,CAAC;;EAED;EACA,MAAMmB,mBAAmB,GAAG,MAAOC,kBAAkB,IAAK;IACtD,MAAMC,OAAO,GAAGD,kBAAkB,CAACE,UAAU;IAC7C,IAAI;MACA;MACA,MAAMb,GAAG,GAAG,MAAM3B,KAAK,CAAC4B,IAAI,CAAC,GAAGL,OAAO,SAAS,EAAE;QAC9CS,KAAK,EAAEO;MACX,CAAC,CAAC;MAEFnB,UAAU,CAAC,sCAAsC,CAAC;MAClDS,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,GAAG,CAACI,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC;MAC/C1B,YAAY,CAACqB,GAAG,CAACI,IAAI,CAACC,KAAK,CAAC;MAC5BxB,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,OAAOyB,GAAG,EAAE;MACVC,OAAO,CAACb,KAAK,CAAC,+BAA+B,EAAEY,GAAG,CAAC;MACnDX,QAAQ,CAAC,2DAA2D,CAAC;IACzE;EACJ,CAAC;;EAED;EACA,MAAMmB,mBAAmB,GAAGA,CAAA,KAAM;IAC9BP,OAAO,CAACb,KAAK,CAAC,4CAA4C,CAAC;IAC3DC,QAAQ,CAAC,yEAAyE,CAAC;EACvF,CAAC;EAED,oBACIlB,OAAA;IAAKsC,SAAS,EAAC,qBAAqB;IAAAC,QAAA,eAChCvC,OAAA,CAACH,QAAQ;MACLQ,UAAU,EAAEA,UAAW;MACvBE,QAAQ,EAAEA,QAAS;MAACC,WAAW,EAAEA,WAAY;MAC7CC,KAAK,EAAEA,KAAM;MAACC,QAAQ,EAAEA,QAAS;MACjCC,QAAQ,EAAEA,QAAS;MAACC,WAAW,EAAEA,WAAY;MAC7CC,OAAO,EAAEA,OAAQ;MAACC,UAAU,EAAEA,UAAW;MACzC0B,QAAQ,EAAEpB,YAAa;MACvBL,OAAO,EAAEA,OAAQ;MAACE,KAAK,EAAEA,KAAM;MAC/BwB,gBAAgB,EAAET,oBAAqB;MACvCU,eAAe,EAAET,mBAAoB,CAAC;MAAA;MACtCU,eAAe,EAAEN,mBAAoB,CAAC;IAAA;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAC5C,EAAA,CAvFIF,QAAQ;EAAA,QACOH,WAAW;AAAA;AAAAkD,EAAA,GAD1B/C,QAAQ;AAyFd,eAAeA,QAAQ;AAAC,IAAA+C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}